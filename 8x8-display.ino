/*

8x8 LED Matrix

Data goes to PNP shift register first, then NPN shift register
Therefore, first transmitted byte gets shifted to the NPN shift register
and second byte will remain in the PNP shift register

PNP transistors connected to first shift register
NPN transistors connected to second shift register

PNP transistors (first shift register) defines the column
NPN transistors (second shift register) defines the row

 */

const int cycles_per_letter = 200;  // Should do this based on millis?

//Latch pin (ST_CP)
const int latchPin = 12;
//Clock pin (SH_CP)
const int clockPin = 11;
////Data pin (DS)
const int dataPin = 10;

char text[] = "Hey there, I can make this work for any ASCII text character :)";

byte charMap[][8] = {
  {B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000}, // space
  {B10000000, B10000000, B10000000, B10000000, B10000000, B00000000, B10000000, B00000000}, // !
  {B10100000, B10100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000}, // "
  {B00000000, B01010000, B11111000, B01010000, B11111000, B01010000, B00000000, B00000000}, // #
  {B00100000, B01110000, B10000000, B01100000, B00010000, B11100000, B01000000, B00000000}, // $
  {B11001000, B11001000, B00010000, B00100000, B01000000, B10011000, B10011000, B00000000}, // %
  {B01000000, B10100000, B10100000, B01000000, B10101000, B10010000, B01101000, B00000000}, // &
  {B10000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000}, // '
  {B00100000, B01000000, B10000000, B10000000, B10000000, B01000000, B00100000, B00000000}, // (
  {B10000000, B01000000, B00100000, B00100000, B00100000, B01000000, B10000000, B00000000}, // )
  {B00000000, B00100000, B00100000, B11111000, B01010000, B10001000, B00000000, B00000000}, // *
  {B00000000, B00100000, B00100000, B11111000, B00100000, B00100000, B00000000, B00000000}, // +
  {B00000000, B00000000, B00000000, B00000000, B11000000, B11000000, B01000000, B10000000}, // ,
  {B00000000, B00000000, B00000000, B11110000, B00000000, B00000000, B00000000, B00000000}, // -
  {B00000000, B00000000, B00000000, B00000000, B00000000, B11000000, B11000000, B00000000}, // .
  {B00010000, B00100000, B00100000, B01000000, B01000000, B10000000, B10000000, B00000000}, // /
  {B01100000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, B00000000}, // 0
  {B01000000, B11000000, B01000000, B01000000, B01000000, B01000000, B11100000, B00000000}, // 1
  {B01100000, B10010000, B00010000, B00100000, B01000000, B10000000, B11110000, B00000000}, // 2
  {B01100000, B10010000, B00010000, B00100000, B00010000, B10010000, B01100000, B00000000}, // 3
  {B00010000, B00110000, B01010000, B10010000, B11110000, B00010000, B00010000, B00000000}, // 4
  {B11110000, B10000000, B11100000, B00010000, B00010000, B10010000, B01100000, B00000000}, // 5
  {B01100000, B10000000, B10000000, B11100000, B10010000, B10010000, B01100000, B00000000}, // 6
  {B11110000, B00010000, B00010000, B00100000, B01000000, B10000000, B10000000, B00000000}, // 7
  {B01100000, B10010000, B10010000, B01100000, B10010000, B10010000, B01100000, B00000000}, // 8
  {B01100000, B10010000, B10010000, B01110000, B00010000, B00010000, B01100000, B00000000}, // 9
  {B00000000, B00000000, B00000000, B00000000, B10000000, B00000000, B10000000, B00000000}, // :
  {B00000000, B00000000, B00000000, B00000000, B01000000, B00000000, B01000000, B10000000}, // ;
  {B00000000, B00000000, B00100000, B01000000, B10000000, B01000000, B00100000, B00000000}, // <
  {B00000000, B00000000, B11100000, B00000000, B11100000, B00000000, B00000000, B00000000}, // =
  {B00000000, B00000000, B10000000, B01000000, B00100000, B01000000, B10000000, B00000000}, // >
  {B01100000, B10010000, B00010000, B01100000, B01000000, B00000000, B01000000, B00000000}, // ?
  {B01110000, B10001000, B10111000, B11011000, B10110000, B10000000, B01110000, B00000000}, // @
  {B01100000, B10010000, B10010000, B10010000, B11110000, B10010000, B10010000, B00000000}, // A
  {B11100000, B10010000, B10010000, B11100000, B10010000, B10010000, B11100000, B00000000}, // B
  {B01100000, B10010000, B10000000, B10000000, B10000000, B10010000, B01100000, B00000000}, // C
  {B11100000, B10010000, B10010000, B10010000, B10010000, B10010000, B11100000, B00000000}, // D
  {B11110000, B10000000, B10000000, B11100000, B10000000, B10000000, B11110000, B00000000}, // E
  {B11110000, B10000000, B10000000, B11100000, B10000000, B10000000, B10000000, B00000000}, // F
  {B01100000, B10010000, B10000000, B10110000, B10010000, B10010000, B01110000, B00000000}, // G
  {B10010000, B10010000, B10010000, B11110000, B10010000, B10010000, B10010000, B00000000}, // H
  {B11100000, B01000000, B01000000, B01000000, B01000000, B01000000, B11100000, B00000000}, // I
  {B00110000, B00010000, B00010000, B00010000, B10010000, B10010000, B01100000, B00000000}, // J
  {B10010000, B10010000, B10100000, B11000000, B10100000, B10010000, B10010000, B00000000}, // K
  {B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B11110000, B00000000}, // L
  {B10001000, B11011000, B10101000, B10101000, B10001000, B10001000, B10001000, B00000000}, // M
  {B10001000, B10001000, B11001000, B10101000, B10011000, B10001000, B10001000, B00000000}, // N
  {B01100000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, B00000000}, // O
  {B11100000, B10010000, B10010000, B11100000, B10000000, B10000000, B10000000, B00000000}, // P
  {B01100000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, B00010000}, // Q
  {B11100000, B10010000, B10010000, B11100000, B10010000, B10010000, B10010000, B00000000}, // R
  {B01100000, B10010000, B10000000, B01100000, B00010000, B00010000, B11100000, B00000000}, // S
  {B11111000, B00100000, B00100000, B00100000, B00100000, B00100000, B00100000, B00000000}, // T
  {B10010000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, B00000000}, // U
  {B10001000, B10001000, B10001000, B10001000, B01010000, B01010000, B00100000, B00000000}, // V
  {B10001000, B10001000, B10001000, B10101000, B10101000, B10101000, B01010000, B00000000}, // W
  {B10001000, B10001000, B01010000, B00100000, B01010000, B10001000, B10001000, B00000000}, // X
  {B10001000, B10001000, B10001000, B01010000, B00100000, B00100000, B00100000, B00000000}, // Y
  {B11110000, B00010000, B00010000, B00100000, B01000000, B10000000, B11110000, B00000000}, // Z
  {B11000000, B10000000, B10000000, B10000000, B10000000, B10000000, B11000000, B00000000}, // [
  {B10000000, B01000000, B01000000, B00100000, B00100000, B00010000, B00010000, B00000000}, // \ backslash
  {B11000000, B01000000, B01000000, B01000000, B01000000, B01000000, B11000000, B00000000}, // ]
  {B01000000, B10100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000}, // hat
  {B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11110000, B00000000}, // _
  {B10000000, B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000}, // `
  {B00000000, B00000000, B01100000, B00010000, B01110000, B10010000, B01110000, B00000000}, // a
  {B10000000, B10000000, B11100000, B10010000, B10010000, B10010000, B11100000, B00000000}, // b
  {B00000000, B00000000, B01100000, B10010000, B10000000, B10010000, B01100000, B00000000}, // c
  {B00010000, B00010000, B01110000, B10010000, B10010000, B10010000, B01110000, B00000000}, // d
  {B00000000, B00000000, B01100000, B10010000, B11110000, B10000000, B01100000, B00000000}, // e
  {B00100000, B01000000, B11100000, B01000000, B01000000, B01000000, B01000000, B00000000}, // f
  {B00000000, B00000000, B01100000, B10010000, B10010000, B01110000, B00010000, B11100000}, // g
  {B10000000, B10000000, B11100000, B10010000, B10010000, B10010000, B10010000, B00000000}, // h
  {B01000000, B00000000, B11000000, B01000000, B01000000, B01000000, B11100000, B00000000}, // i
  {B00010000, B00000000, B00110000, B00010000, B00010000, B00010000, B10010000, B01100000}, // j
  {B10000000, B10000000, B10010000, B10100000, B11000000, B10100000, B10010000, B00000000}, // k
  {B11000000, B01000000, B01000000, B01000000, B01000000, B01000000, B11100000, B00000000}, // l
  {B00000000, B00000000, B11110000, B10101000, B10101000, B10101000, B10101000, B00000000}, // m
  {B00000000, B00000000, B11100000, B10010000, B10010000, B10010000, B10010000, B00000000}, // n
  {B00000000, B00000000, B01100000, B10010000, B10010000, B10010000, B01100000, B00000000}, // o
  {B00000000, B00000000, B11100000, B10010000, B10010000, B11100000, B10000000, B10000000}, // p
  {B00000000, B00000000, B01110000, B10010000, B10010000, B01110000, B00010000, B00010000}, // q
  {B00000000, B00000000, B10110000, B11000000, B10000000, B10000000, B10000000, B00000000}, // r
  {B00000000, B00000000, B01110000, B10000000, B01100000, B00010000, B11100000, B00000000}, // s
  {B01000000, B01000000, B11100000, B01000000, B01000000, B01000000, B00100000, B00000000}, // t
  {B00000000, B00000000, B10010000, B10010000, B10010000, B10010000, B01110000, B00000000}, // u
  {B00000000, B00000000, B10001000, B10001000, B10001000, B01010000, B00100000, B00000000}, // v
  {B00000000, B00000000, B10101000, B10101000, B10101000, B10101000, B01010000, B00000000}, // w
  {B00000000, B00000000, B10001000, B01010000, B00100000, B01010000, B10001000, B00000000}, // x
  {B00000000, B00000000, B10010000, B10010000, B10010000, B01110000, B00010000, B11100000}, // y
  {B00000000, B00000000, B11100000, B00100000, B01000000, B10000000, B11100000, B00000000}, // z
  {B00100000, B01000000, B01000000, B10000000, B01000000, B01000000, B00100000, B00000000}, // {
  {B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000}, // |
  {B10000000, B01000000, B01000000, B00100000, B01000000, B01000000, B10000000, B00000000}, // }
  {B00000000, B00000000, B01010000, B10100000, B00000000, B00000000, B00000000, B00000000}, // ~
};

const byte rows[8] = {
  B11111110,
  B11111101,
  B11111011,
  B11110111,
  B11101111,
  B11011111,
  B10111111,
  B01111111,
};

void setup() {
  //set pins to output because they are addressed in the main loop
  pinMode(latchPin, OUTPUT);
  pinMode(dataPin, OUTPUT);  
  pinMode(clockPin, OUTPUT);
}

void loop() {
  for(int letterPos=0; letterPos<sizeof(text) - 1; letterPos++){
    int charMapPos = text[letterPos] - 32;
    byte *letterBytes = charMap[charMapPos];
    displayLetter(letterBytes);
  }
}
  
void displayLetter(byte letter[]){
  for(int cycle=0; cycle<cycles_per_letter; cycle++){
    for(byte rowNum=0; rowNum<8; rowNum++){

      digitalWrite(latchPin, LOW);
      
      // shift the bits out:
      shiftOut(dataPin, clockPin, MSBFIRST, letter[rowNum]);
      shiftOut(dataPin, clockPin, MSBFIRST, rows[rowNum]);
      
      digitalWrite(latchPin, HIGH);
    }
  }
}
