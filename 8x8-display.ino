/*

8x8 LED Matrix

Data goes to PNP shift register first, then NPN shift register
Therefore, first transmitted byte gets shifted to the NPN shift register
and second byte will remain in the PNP shift register

PNP transistors connected to first shift register
NPN transistors connected to second shift register

PNP transistors (first shift register) defines the column
NPN transistors (second shift register) defines the row

 */

const int cycles_per_letter = 80;  // FIXME: Convert to millis/frame once scrolling is enabled

const int latchPin = 12;  // ST_CP
const int clockPin = 11;  // SH_CP
const int dataPin = 10;  // DS

char text[] = "abcdefg";

byte charMap[][8] = {
  {B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000},  // space
  {B10000000, B10000000, B10000000, B10000000, B10000000, B00000000, B10000000, B00000000},  // !
  {B10100000, B10100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000},  // "
  {B00000000, B01010000, B11111000, B01010000, B11111000, B01010000, B00000000, B00000000},  // #
  {B00100000, B01110000, B10000000, B01100000, B00010000, B11100000, B01000000, B00000000},  // $
  {B11001000, B11001000, B00010000, B00100000, B01000000, B10011000, B10011000, B00000000},  // %
  {B01000000, B10100000, B10100000, B01000000, B10101000, B10010000, B01101000, B00000000},  // &
  {B10000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000},  // '
  {B00100000, B01000000, B10000000, B10000000, B10000000, B01000000, B00100000, B00000000},  // (
  {B10000000, B01000000, B00100000, B00100000, B00100000, B01000000, B10000000, B00000000},  // )
  {B00000000, B00100000, B00100000, B11111000, B01010000, B10001000, B00000000, B00000000},  // *
  {B00000000, B00100000, B00100000, B11111000, B00100000, B00100000, B00000000, B00000000},  // +
  {B00000000, B00000000, B00000000, B00000000, B11000000, B11000000, B01000000, B10000000},  // ,
  {B00000000, B00000000, B00000000, B11110000, B00000000, B00000000, B00000000, B00000000},  // -
  {B00000000, B00000000, B00000000, B00000000, B00000000, B11000000, B11000000, B00000000},  // .
  {B00010000, B00100000, B00100000, B01000000, B01000000, B10000000, B10000000, B00000000},  // /
  {B01100000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, B00000000},  // 0
  {B01000000, B11000000, B01000000, B01000000, B01000000, B01000000, B11100000, B00000000},  // 1
  {B01100000, B10010000, B00010000, B00100000, B01000000, B10000000, B11110000, B00000000},  // 2
  {B01100000, B10010000, B00010000, B00100000, B00010000, B10010000, B01100000, B00000000},  // 3
  {B00010000, B00110000, B01010000, B10010000, B11110000, B00010000, B00010000, B00000000},  // 4
  {B11110000, B10000000, B11100000, B00010000, B00010000, B10010000, B01100000, B00000000},  // 5
  {B01100000, B10000000, B10000000, B11100000, B10010000, B10010000, B01100000, B00000000},  // 6
  {B11110000, B00010000, B00010000, B00100000, B01000000, B10000000, B10000000, B00000000},  // 7
  {B01100000, B10010000, B10010000, B01100000, B10010000, B10010000, B01100000, B00000000},  // 8
  {B01100000, B10010000, B10010000, B01110000, B00010000, B00010000, B01100000, B00000000},  // 9
  {B00000000, B00000000, B00000000, B00000000, B10000000, B00000000, B10000000, B00000000},  // :
  {B00000000, B00000000, B00000000, B00000000, B01000000, B00000000, B01000000, B10000000},  // ;
  {B00000000, B00000000, B00100000, B01000000, B10000000, B01000000, B00100000, B00000000},  // <
  {B00000000, B00000000, B11100000, B00000000, B11100000, B00000000, B00000000, B00000000},  // =
  {B00000000, B00000000, B10000000, B01000000, B00100000, B01000000, B10000000, B00000000},  // >
  {B01100000, B10010000, B00010000, B01100000, B01000000, B00000000, B01000000, B00000000},  // ?
  {B01110000, B10001000, B10111000, B11011000, B10110000, B10000000, B01110000, B00000000},  // @
  {B01100000, B10010000, B10010000, B10010000, B11110000, B10010000, B10010000, B00000000},  // A
  {B11100000, B10010000, B10010000, B11100000, B10010000, B10010000, B11100000, B00000000},  // B
  {B01100000, B10010000, B10000000, B10000000, B10000000, B10010000, B01100000, B00000000},  // C
  {B11100000, B10010000, B10010000, B10010000, B10010000, B10010000, B11100000, B00000000},  // D
  {B11110000, B10000000, B10000000, B11100000, B10000000, B10000000, B11110000, B00000000},  // E
  {B11110000, B10000000, B10000000, B11100000, B10000000, B10000000, B10000000, B00000000},  // F
  {B01100000, B10010000, B10000000, B10110000, B10010000, B10010000, B01110000, B00000000},  // G
  {B10010000, B10010000, B10010000, B11110000, B10010000, B10010000, B10010000, B00000000},  // H
  {B11100000, B01000000, B01000000, B01000000, B01000000, B01000000, B11100000, B00000000},  // I
  {B00110000, B00010000, B00010000, B00010000, B10010000, B10010000, B01100000, B00000000},  // J
  {B10010000, B10010000, B10100000, B11000000, B10100000, B10010000, B10010000, B00000000},  // K
  {B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B11110000, B00000000},  // L
  {B10001000, B11011000, B10101000, B10101000, B10001000, B10001000, B10001000, B00000000},  // M
  {B10001000, B10001000, B11001000, B10101000, B10011000, B10001000, B10001000, B00000000},  // N
  {B01100000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, B00000000},  // O
  {B11100000, B10010000, B10010000, B11100000, B10000000, B10000000, B10000000, B00000000},  // P
  {B01100000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, B00010000},  // Q
  {B11100000, B10010000, B10010000, B11100000, B10010000, B10010000, B10010000, B00000000},  // R
  {B01100000, B10010000, B10000000, B01100000, B00010000, B00010000, B11100000, B00000000},  // S
  {B11111000, B00100000, B00100000, B00100000, B00100000, B00100000, B00100000, B00000000},  // T
  {B10010000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, B00000000},  // U
  {B10001000, B10001000, B10001000, B10001000, B01010000, B01010000, B00100000, B00000000},  // V
  {B10001000, B10001000, B10001000, B10101000, B10101000, B10101000, B01010000, B00000000},  // W
  {B10001000, B10001000, B01010000, B00100000, B01010000, B10001000, B10001000, B00000000},  // X
  {B10001000, B10001000, B10001000, B01010000, B00100000, B00100000, B00100000, B00000000},  // Y
  {B11110000, B00010000, B00010000, B00100000, B01000000, B10000000, B11110000, B00000000},  // Z
  {B11000000, B10000000, B10000000, B10000000, B10000000, B10000000, B11000000, B00000000},  // [
  {B10000000, B01000000, B01000000, B00100000, B00100000, B00010000, B00010000, B00000000},  // \
  {B11000000, B01000000, B01000000, B01000000, B01000000, B01000000, B11000000, B00000000},  // ]
  {B01000000, B10100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000},  // ^
  {B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11110000, B00000000},  // _
  {B10000000, B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000},  // `
  {B00000000, B00000000, B01100000, B00010000, B01110000, B10010000, B01110000, B00000000},  // a
  {B10000000, B10000000, B11100000, B10010000, B10010000, B10010000, B11100000, B00000000},  // b
  {B00000000, B00000000, B01100000, B10010000, B10000000, B10010000, B01100000, B00000000},  // c
  {B00010000, B00010000, B01110000, B10010000, B10010000, B10010000, B01110000, B00000000},  // d
  {B00000000, B00000000, B01100000, B10010000, B11110000, B10000000, B01100000, B00000000},  // e
  {B00100000, B01000000, B11100000, B01000000, B01000000, B01000000, B01000000, B00000000},  // f
  {B00000000, B00000000, B01100000, B10010000, B10010000, B01110000, B00010000, B11100000},  // g
  {B10000000, B10000000, B11100000, B10010000, B10010000, B10010000, B10010000, B00000000},  // h
  {B01000000, B00000000, B11000000, B01000000, B01000000, B01000000, B11100000, B00000000},  // i
  {B00010000, B00000000, B00110000, B00010000, B00010000, B00010000, B10010000, B01100000},  // j
  {B10000000, B10000000, B10010000, B10100000, B11000000, B10100000, B10010000, B00000000},  // k
  {B11000000, B01000000, B01000000, B01000000, B01000000, B01000000, B11100000, B00000000},  // l
  {B00000000, B00000000, B11110000, B10101000, B10101000, B10101000, B10101000, B00000000},  // m
  {B00000000, B00000000, B11100000, B10010000, B10010000, B10010000, B10010000, B00000000},  // n
  {B00000000, B00000000, B01100000, B10010000, B10010000, B10010000, B01100000, B00000000},  // o
  {B00000000, B00000000, B11100000, B10010000, B10010000, B11100000, B10000000, B10000000},  // p
  {B00000000, B00000000, B01110000, B10010000, B10010000, B01110000, B00010000, B00010000},  // q
  {B00000000, B00000000, B10110000, B11000000, B10000000, B10000000, B10000000, B00000000},  // r
  {B00000000, B00000000, B01110000, B10000000, B01100000, B00010000, B11100000, B00000000},  // s
  {B01000000, B01000000, B11100000, B01000000, B01000000, B01000000, B00100000, B00000000},  // t
  {B00000000, B00000000, B10010000, B10010000, B10010000, B10010000, B01110000, B00000000},  // u
  {B00000000, B00000000, B10001000, B10001000, B10001000, B01010000, B00100000, B00000000},  // v
  {B00000000, B00000000, B10101000, B10101000, B10101000, B10101000, B01010000, B00000000},  // w
  {B00000000, B00000000, B10001000, B01010000, B00100000, B01010000, B10001000, B00000000},  // x
  {B00000000, B00000000, B10010000, B10010000, B10010000, B01110000, B00010000, B11100000},  // y
  {B00000000, B00000000, B11100000, B00100000, B01000000, B10000000, B11100000, B00000000},  // z
  {B00100000, B01000000, B01000000, B10000000, B01000000, B01000000, B00100000, B00000000},  // {
  {B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000},  // |
  {B10000000, B01000000, B01000000, B00100000, B01000000, B01000000, B10000000, B00000000},  // }
  {B00000000, B00000000, B01010000, B10100000, B00000000, B00000000, B00000000, B00000000},  // ~
};

const byte rows[8] = {
  B11111110,
  B11111101,
  B11111011,
  B11110111,
  B11101111,
  B11011111,
  B10111111,
  B01111111,
};

void setup() {
  pinMode(latchPin, OUTPUT);
  pinMode(dataPin, OUTPUT);  
  pinMode(clockPin, OUTPUT);
}

void loop() {
  int numCharsInText = sizeof(text) - 1;
  for(int letterPos=0; letterPos < numCharsInText; letterPos++) {
    int nextLetterPos = letterPos + 1;
    
    char letter = text[letterPos];
    char nextLetter;
    
    if(nextLetterPos < numCharsInText) {
      nextLetter = text[nextLetterPos];
    }
    else{
      nextLetter = ' ';
    }
    
    int charMapPos = letter - 33;
    int nextCharMapPos = nextLetter - 33;
    
    byte *letterBytes = charMap[charMapPos];
    byte *nextLetterBytes = charMap[nextCharMapPos];
    
    for(int n = 0; n < 8; n++) {

      byte baseVal = 2;
      byte lengthVal = 8;

      double a0 = (double) letterBytes[0];
      double a1 = (double) letterBytes[1];
      double a2 = (double) letterBytes[2];
      double a3 = (double) letterBytes[3];
      double a4 = (double) letterBytes[4];
      double a5 = (double) letterBytes[5];
      double a6 = (double) letterBytes[6];
      double a7 = (double) letterBytes[7];

      double b0 = (double) nextLetterBytes[0];
      double b1 = (double) nextLetterBytes[1];
      double b2 = (double) nextLetterBytes[2];
      double b3 = (double) nextLetterBytes[3];
      double b4 = (double) nextLetterBytes[4];
      double b5 = (double) nextLetterBytes[5];
      double b6 = (double) nextLetterBytes[6];
      double b7 = (double) nextLetterBytes[7];

      double len = 8;
      double base = 2;
      double m = pow(base, (len - n));

      double first0 = a0 - floor(a0 / m) * m;
      double first1 = a1 - floor(a1 / m) * m;
      double first2 = a2 - floor(a2 / m) * m;
      double first3 = a3 - floor(a3 / m) * m;
      double first4 = a4 - floor(a4 / m) * m;
      double first5 = a5 - floor(a5 / m) * m;
      double first6 = a6 - floor(a6 / m) * m;
      double first7 = a7 - floor(a7 / m) * m;

      double second0 = floor(b0 / m);
      double second1 = floor(b1 / m);
      double second2 = floor(b2 / m);
      double second3 = floor(b3 / m);
      double second4 = floor(b4 / m);
      double second5 = floor(b5 / m);
      double second6 = floor(b6 / m);
      double second7 = floor(b7 / m);


      double result0 = first0 * pow(base, n) + second0;
      double result1 = first1 * pow(base, n) + second1;
      double result2 = first2 * pow(base, n) + second2;
      double result3 = first3 * pow(base, n) + second3;
      double result4 = first4 * pow(base, n) + second4;
      double result5 = first5 * pow(base, n) + second5;
      double result6 = first6 * pow(base, n) + second6;
      double result7 = first7 * pow(base, n) + second7;
      
      byte visibleFrame[] = {
        (byte) result0,
        (byte) result1,
        (byte) result2,
        (byte) result3,
        (byte) result4,
        (byte) result5,
        (byte) result6,
        (byte) result7,
      };

      displayLetter(visibleFrame);
    }
  }
}
  
void displayLetter(byte letter[]){
  for(int cycle=0; cycle<cycles_per_letter; cycle++){
    for(byte rowNum=0; rowNum<8; rowNum++){
      digitalWrite(latchPin, LOW);
      shiftOut(dataPin, clockPin, MSBFIRST, letter[rowNum]);
      shiftOut(dataPin, clockPin, MSBFIRST, rows[rowNum]);
      digitalWrite(latchPin, HIGH);
    }
  }
}
